<queries>

<aQuery><region name="Global" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="AK" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="AL" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="AR" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="AZ" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="CA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="CO" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="CT" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="DC" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="DE" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="FL" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="GA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="HI" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="IA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="ID" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="IL" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="IN" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="KS" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="KY" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="LA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MD" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="ME" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MI" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MN" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MO" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MS" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="MT" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NC" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="ND" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NE" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NH" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NJ" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NM" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NV" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="NY" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="OH" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="OK" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="OR" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="PA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="RI" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="SC" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="SD" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="TN" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="TX" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="UT" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="VA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="VT" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="WA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="WI" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="WV" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="WY" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="USA" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Africa_Eastern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Africa_Northern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Africa_Southern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Africa_Western" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Australia_NZ" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Brazil" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Canada" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Central America and Caribbean" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Central Asia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="China" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="EU-12" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="EU-15" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Europe_Eastern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Europe_Non_EU" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="European Free Trade Association" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="India" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Indonesia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Japan" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Mexico" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Middle East" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Pakistan" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Russia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="South Africa" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="South America_Northern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="South America_Southern" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="South Asia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="South Korea" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Southeast Asia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Taiwan" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Argentina" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery><aQuery><region name="Colombia" /><supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 }; 
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded unconventional oil', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then 
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits')],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum &gt; 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return 
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits')],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits')],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) &gt; 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage &gt; 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) &gt; 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 unordered { 	
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios, 	    
			 	 $region in $regionsG 	
			 	 let $scenario_split := tokenize($scenario, ' '), 	    
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return 
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 } 
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))
         
         </xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="limestone" to="" />
                  <rewrite from="wind-H2 renewable" to="g wind" />
                  <rewrite from="geothermal-elect" to="i geothermal" />
                  <rewrite from="regional sugarbeet for ethanol" to="d biomass" />
                  <rewrite from="biomass" to="d biomass" />
                  <rewrite from="traded biomass" to="d biomass" />
                  <rewrite from="traded biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable" to="e nuclear" />
                  <rewrite from="natural gas" to="b natural gas" />
                  <rewrite from="exotic-elect" to="j breakthrough" />
                  <rewrite from="wind-elect" to="g wind" />
                  <rewrite from="elect_td_ind" to="" />
                  <rewrite from="hydro-elect renewable" to="f hydro" />
                  <rewrite from="solar-H2 renewable" to="h solar" />
                  <rewrite from="regional biomassOil CCS" to="d biomass CCS" />
                  <rewrite from="regional natural gas" to="" />
                  <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="coal CCS" to="c coal CCS" />
                  <rewrite from="coal" to="c coal" />
                  <rewrite from="crude oil" to="a oil" />
                  <rewrite from="natural gas CCS" to="b natural gas CCS" />
                  <rewrite from="crude oil CCS" to="a oil CCS" />
                  <rewrite from="traded unconventional oil" to="a oil" />
                  <rewrite from="geothermal-elect renewable" to="i geothermal" />
                  <rewrite from="geothermal-elect renewable CCS" to="i geothermal" />
                  <rewrite from="traditional biomass" to="j traditional biomass" />
                  <rewrite from="regional sugar for ethanol" to="d biomass" />
                  <rewrite from="biomass CCS" to="d biomass CCS" />
                  <rewrite from="nuclear-elect renewable CCS" to="e nuclear" />
                  <rewrite from="renewable" to="" />
                  <rewrite from="regional corn for ethanol" to="d biomass" />
                  <rewrite from="regional corn for ethanol CCS" to="d biomass CCS" />
                  <rewrite from="wind-elect renewable" to="g wind" />
                  <rewrite from="regional biomassOil" to="d biomass" />
                  <rewrite from="wind-elect renewable CCS" to="g wind" />
                  <rewrite from="nuclear-H2 renewable" to="e nuclear" />
                  <rewrite from="hydro-elect renewable CCS" to="f hydro" />
                  <rewrite from="solar-elect renewable" to="h solar" />
                  <rewrite from="solar-elect renewable CCS" to="h solar" />
                  <rewrite from="traded unconventional oil CCS" to="a oil CCS" />
                  <rewrite from="seawater" to="" />
                  <rewrite from="water consumption" to="" />
                  <rewrite from="water withdrawals" to="" />
                  <rewrite from="seawater CCS" to="" />
                  <rewrite from="water consumption CCS" to="" />
                  <rewrite from="water withdrawals CCS" to="" />
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
         </aQuery></queries>