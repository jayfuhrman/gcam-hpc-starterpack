<queries>

<aQuery><region name="Global" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="USA" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Africa_Eastern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Africa_Northern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Africa_Southern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Africa_Western" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Australia_NZ" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Brazil" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Canada" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Central America and Caribbean" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Central Asia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="China" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="EU-12" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="EU-15" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Europe_Eastern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Europe_Non_EU" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="European Free Trade Association" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="India" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Indonesia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Japan" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Mexico" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Middle East" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Pakistan" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Russia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="South Africa" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="South America_Northern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="South America_Southern" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="South Asia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="South Korea" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Southeast Asia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Taiwan" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Argentina" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery><aQuery><region name="Colombia" /><query title="land allocation by crop and water source">
                <axis1 name="water">water[@name]</axis1>
                <axis2 name="Year">land-allocation[@year]</axis2>
                <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">
                     
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            
            
                </xPath>
                <comments />
            </query>
            </aQuery></queries>